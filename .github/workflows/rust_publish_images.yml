name: Publish Rust Container Image

env:
  PLATFORMS: linux/amd64, linux/arm64

on:
  push:
    branches:
      - main
      - mj/cli-scan
    tags:
      - "v*.*.*"

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  check-version:
    name: Ensure GitHub Release & Cargo.toml Version Numbers Match
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Cargo Version Matches Tag
        uses: spice-labs-inc/action-check-version@main

  push_to_dockerhub:
    name: Build, Scan, and (if on main) Push Docker Image to Docker Hub
    runs-on: ubuntu-24.04
    needs: check-version
    if: startsWith(github.ref, 'refs/tags/v')  # only act on semver tags

    permissions:
      contents: read
      attestations: write
      id-token: write

    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Checkout with LFS
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build project
        run: cargo build --release

      # --- Short SHA snippet (reusable in future workflows) ---
      - name: Compute short SHA
        id: vars
        shell: bash
        run: echo "short_sha=$(git rev-parse --short=7 HEAD)" >> "$GITHUB_OUTPUT"

      - name: Extract version from tag
        id: version
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            echo "version=${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
          else
            echo "Not a semver tag" >&2
            exit 1
          fi

      - name: Determine scan tag
        id: scantag
        shell: bash
        env:
          SHORT_SHA: "${{ steps.vars.outputs.short_sha }}"
        run: |
          # Scan tag follows project standard:
          #   <repo>-<version> for tags, <repo>-<shortsha> for non-tags
          REPO_NAME="${GITHUB_REPOSITORY##*/}"
          if [[ "${GITHUB_REF}" =~ ^refs/tags/v([0-9]+\.[0-9]+\.[0-9]+)$ ]]; then
            echo "tag=${REPO_NAME}-${BASH_REMATCH[1]}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${REPO_NAME}-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          fi

      - name: Scan built artifacts with Spice-Labs CLI
        uses: spice-labs-inc/action-spice-labs-cli-scan@v3
        with:
          spice_pass: "${{ secrets.SPICE_PASS }}"
          file_path: "${{ github.workspace }}/target"
          tag: "${{ steps.scantag.outputs.tag }}"

      - name: Ensure tag commit is on main
        id: onmain
        shell: bash
        run: |
          set -euo pipefail
          git fetch --no-tags origin +refs/heads/main:refs/remotes/origin/main
          if git merge-base --is-ancestor "${GITHUB_SHA}" "origin/main"; then
            echo "on_main=true" >> "$GITHUB_OUTPUT"
          else
            echo "on_main=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Log in to Docker Hub
        if: steps.onmain.outputs.on_main == 'true'
        uses: docker/login-action@v3
        with:
          username: "${{ secrets.DOCKERHUB_USERNAME }}"
          password: "${{ secrets.DOCKERHUB_TOKEN }}"

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        if: steps.onmain.outputs.on_main == 'true'
        uses: docker/metadata-action@v5
        with:
          images: spicelabs/bigtent
          tags: |
            type=semver,pattern={{version}}   # publish only :<version>
          flavor: |
            latest=false                      # prohibit :latest

      - name: Build and Push Docker image
        id: push
        if: steps.onmain.outputs.on_main == 'true'
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ env.PLATFORMS }}
          context: .
          push: true
          provenance: true
          sbom: true
          tags: "${{ steps.meta.outputs.tags }}"
          labels: "${{ steps.meta.outputs.labels }}"
          
